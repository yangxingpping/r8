// generated by ./ddl2cpp ./r8.sql r8 r8
#ifndef R8_R8_H
#define R8_R8_H

#include <sqlpp11/table.h>
#include <sqlpp11/data_types.h>
#include <sqlpp11/char_sequence.h>

namespace r8
{
  namespace Wexingroup_
  {
    struct Id
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "id";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T id;
            T& operator()() { return id; }
            const T& operator()() const { return id; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer, sqlpp::tag::must_not_insert, sqlpp::tag::must_not_update, sqlpp::tag::can_be_null>;
    };
    struct User
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "user";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T user;
            T& operator()() { return user; }
            const T& operator()() const { return user; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::varchar, sqlpp::tag::can_be_null>;
    };
    struct Phone
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "phone";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T phone;
            T& operator()() { return phone; }
            const T& operator()() const { return phone; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::varchar, sqlpp::tag::can_be_null>;
    };
    struct Name
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "name";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T name;
            T& operator()() { return name; }
            const T& operator()() const { return name; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::varchar, sqlpp::tag::can_be_null>;
    };
  } // namespace Wexingroup_

  struct Wexingroup: sqlpp::table_t<Wexingroup,
               Wexingroup_::Id,
               Wexingroup_::User,
               Wexingroup_::Phone,
               Wexingroup_::Name>
  {
    struct _alias_t
    {
      static constexpr const char _literal[] =  "wexingroup";
      using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
      template<typename T>
      struct _member_t
      {
        T wexingroup;
        T& operator()() { return wexingroup; }
        const T& operator()() const { return wexingroup; }
      };
    };
  };
  namespace Orderrecord_
  {
    struct Id
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "id";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T id;
            T& operator()() { return id; }
            const T& operator()() const { return id; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer, sqlpp::tag::must_not_insert, sqlpp::tag::must_not_update, sqlpp::tag::can_be_null>;
    };
    struct User
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "user";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T user;
            T& operator()() { return user; }
            const T& operator()() const { return user; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::varchar, sqlpp::tag::can_be_null>;
    };
    struct Phone
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "phone";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T phone;
            T& operator()() { return phone; }
            const T& operator()() const { return phone; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::varchar, sqlpp::tag::can_be_null>;
    };
    struct Gendatetime
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "gendatetime";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T gendatetime;
            T& operator()() { return gendatetime; }
            const T& operator()() const { return gendatetime; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::time_point, sqlpp::tag::can_be_null>;
    };
    struct Sordernum
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "sordernum";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T sordernum;
            T& operator()() { return sordernum; }
            const T& operator()() const { return sordernum; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::varchar, sqlpp::tag::can_be_null>;
    };
    struct Ordernum
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "ordernum";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T ordernum;
            T& operator()() { return ordernum; }
            const T& operator()() const { return ordernum; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer, sqlpp::tag::can_be_null>;
    };
    struct Groupid
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "groupid";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T groupid;
            T& operator()() { return groupid; }
            const T& operator()() const { return groupid; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer, sqlpp::tag::can_be_null>;
    };
    struct Status
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "status";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T status;
            T& operator()() { return status; }
            const T& operator()() const { return status; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer, sqlpp::tag::can_be_null>;
    };
    struct Nickname
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "nickname";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T nickname;
            T& operator()() { return nickname; }
            const T& operator()() const { return nickname; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::varchar, sqlpp::tag::can_be_null>;
    };
    struct Ordertime
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "ordertime";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T ordertime;
            T& operator()() { return ordertime; }
            const T& operator()() const { return ordertime; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::varchar, sqlpp::tag::can_be_null>;
    };
    struct Paytime
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "paytime";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T paytime;
            T& operator()() { return paytime; }
            const T& operator()() const { return paytime; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::varchar, sqlpp::tag::can_be_null>;
    };
    struct Formatdetail
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "formatdetail";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T formatdetail;
            T& operator()() { return formatdetail; }
            const T& operator()() const { return formatdetail; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::varchar, sqlpp::tag::can_be_null>;
    };
    struct Orderdetail
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "orderdetail";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T orderdetail;
            T& operator()() { return orderdetail; }
            const T& operator()() const { return orderdetail; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::varchar, sqlpp::tag::can_be_null>;
    };
    struct Price
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "price";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T price;
            T& operator()() { return price; }
            const T& operator()() const { return price; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer, sqlpp::tag::can_be_null>;
    };
  } // namespace Orderrecord_

  struct Orderrecord: sqlpp::table_t<Orderrecord,
               Orderrecord_::Id,
               Orderrecord_::User,
               Orderrecord_::Phone,
               Orderrecord_::Gendatetime,
               Orderrecord_::Sordernum,
               Orderrecord_::Ordernum,
               Orderrecord_::Groupid,
               Orderrecord_::Status,
               Orderrecord_::Nickname,
               Orderrecord_::Ordertime,
               Orderrecord_::Paytime,
               Orderrecord_::Formatdetail,
               Orderrecord_::Orderdetail,
               Orderrecord_::Price>
  {
    struct _alias_t
    {
      static constexpr const char _literal[] =  "orderrecord";
      using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
      template<typename T>
      struct _member_t
      {
        T orderrecord;
        T& operator()() { return orderrecord; }
        const T& operator()() const { return orderrecord; }
      };
    };
  };
  namespace Categy_
  {
    struct Id
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "id";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T id;
            T& operator()() { return id; }
            const T& operator()() const { return id; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer, sqlpp::tag::must_not_insert, sqlpp::tag::must_not_update, sqlpp::tag::can_be_null>;
    };
    struct User
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "user";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T user;
            T& operator()() { return user; }
            const T& operator()() const { return user; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::varchar, sqlpp::tag::can_be_null>;
    };
    struct Phone
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "phone";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T phone;
            T& operator()() { return phone; }
            const T& operator()() const { return phone; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::varchar, sqlpp::tag::can_be_null>;
    };
    struct Name
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "name";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T name;
            T& operator()() { return name; }
            const T& operator()() const { return name; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::varchar, sqlpp::tag::can_be_null>;
    };
    struct Price
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "price";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T price;
            T& operator()() { return price; }
            const T& operator()() const { return price; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer, sqlpp::tag::can_be_null>;
    };
  } // namespace Categy_

  struct Categy: sqlpp::table_t<Categy,
               Categy_::Id,
               Categy_::User,
               Categy_::Phone,
               Categy_::Name,
               Categy_::Price>
  {
    struct _alias_t
    {
      static constexpr const char _literal[] =  "categy";
      using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
      template<typename T>
      struct _member_t
      {
        T categy;
        T& operator()() { return categy; }
        const T& operator()() const { return categy; }
      };
    };
  };
  namespace Menu_
  {
    struct Id
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "id";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T id;
            T& operator()() { return id; }
            const T& operator()() const { return id; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer, sqlpp::tag::must_not_insert, sqlpp::tag::must_not_update, sqlpp::tag::can_be_null>;
    };
    struct User
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "user";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T user;
            T& operator()() { return user; }
            const T& operator()() const { return user; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::varchar, sqlpp::tag::can_be_null>;
    };
    struct Phone
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "phone";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T phone;
            T& operator()() { return phone; }
            const T& operator()() const { return phone; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::varchar, sqlpp::tag::can_be_null>;
    };
    struct Name
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "name";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T name;
            T& operator()() { return name; }
            const T& operator()() const { return name; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::varchar, sqlpp::tag::can_be_null>;
    };
    struct Price
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "price";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T price;
            T& operator()() { return price; }
            const T& operator()() const { return price; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::floating_point, sqlpp::tag::can_be_null>;
    };
    struct Categy
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "categy";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T categy;
            T& operator()() { return categy; }
            const T& operator()() const { return categy; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer, sqlpp::tag::can_be_null>;
    };
    struct Descx
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "descx";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T descx;
            T& operator()() { return descx; }
            const T& operator()() const { return descx; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::varchar, sqlpp::tag::can_be_null>;
    };
    struct Defaultselect
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "defaultselect";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T defaultselect;
            T& operator()() { return defaultselect; }
            const T& operator()() const { return defaultselect; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer, sqlpp::tag::can_be_null>;
    };
  } // namespace Menu_

  struct Menu: sqlpp::table_t<Menu,
               Menu_::Id,
               Menu_::User,
               Menu_::Phone,
               Menu_::Name,
               Menu_::Price,
               Menu_::Categy,
               Menu_::Descx,
               Menu_::Defaultselect>
  {
    struct _alias_t
    {
      static constexpr const char _literal[] =  "menu";
      using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
      template<typename T>
      struct _member_t
      {
        T menu;
        T& operator()() { return menu; }
        const T& operator()() const { return menu; }
      };
    };
  };
  namespace OriginalOrder_
  {
    struct Phone
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "phone";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T phone;
            T& operator()() { return phone; }
            const T& operator()() const { return phone; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::varchar, sqlpp::tag::can_be_null>;
    };
    struct Groupid
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "groupid";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T groupid;
            T& operator()() { return groupid; }
            const T& operator()() const { return groupid; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer, sqlpp::tag::can_be_null>;
    };
    struct Ordertime
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "ordertime";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T ordertime;
            T& operator()() { return ordertime; }
            const T& operator()() const { return ordertime; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::varchar, sqlpp::tag::can_be_null>;
    };
    struct Txt
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "txt";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T txt;
            T& operator()() { return txt; }
            const T& operator()() const { return txt; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::text, sqlpp::tag::can_be_null>;
    };
  } // namespace OriginalOrder_

  struct OriginalOrder: sqlpp::table_t<OriginalOrder,
               OriginalOrder_::Phone,
               OriginalOrder_::Groupid,
               OriginalOrder_::Ordertime,
               OriginalOrder_::Txt>
  {
    struct _alias_t
    {
      static constexpr const char _literal[] =  "originalOrder";
      using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
      template<typename T>
      struct _member_t
      {
        T originalOrder;
        T& operator()() { return originalOrder; }
        const T& operator()() const { return originalOrder; }
      };
    };
  };
  namespace Groupkeyword_
  {
    struct User
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "user";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T user;
            T& operator()() { return user; }
            const T& operator()() const { return user; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::varchar, sqlpp::tag::can_be_null>;
    };
    struct Phone
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "phone";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T phone;
            T& operator()() { return phone; }
            const T& operator()() const { return phone; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::varchar, sqlpp::tag::can_be_null>;
    };
    struct Keyword
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "keyword";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T keyword;
            T& operator()() { return keyword; }
            const T& operator()() const { return keyword; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::varchar, sqlpp::tag::can_be_null>;
    };
  } // namespace Groupkeyword_

  struct Groupkeyword: sqlpp::table_t<Groupkeyword,
               Groupkeyword_::User,
               Groupkeyword_::Phone,
               Groupkeyword_::Keyword>
  {
    struct _alias_t
    {
      static constexpr const char _literal[] =  "groupkeyword";
      using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
      template<typename T>
      struct _member_t
      {
        T groupkeyword;
        T& operator()() { return groupkeyword; }
        const T& operator()() const { return groupkeyword; }
      };
    };
  };
  namespace GreetState_
  {
    struct User
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "user";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T user;
            T& operator()() { return user; }
            const T& operator()() const { return user; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::varchar, sqlpp::tag::can_be_null>;
    };
    struct Phone
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "phone";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T phone;
            T& operator()() { return phone; }
            const T& operator()() const { return phone; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::varchar, sqlpp::tag::can_be_null>;
    };
    struct Hello
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "hello";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T hello;
            T& operator()() { return hello; }
            const T& operator()() const { return hello; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::varchar, sqlpp::tag::can_be_null>;
    };
    struct Endtime
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "endtime";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T endtime;
            T& operator()() { return endtime; }
            const T& operator()() const { return endtime; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::varchar, sqlpp::tag::can_be_null>;
    };
    struct Attention
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "attention";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T attention;
            T& operator()() { return attention; }
            const T& operator()() const { return attention; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::varchar, sqlpp::tag::can_be_null>;
    };
    struct Goodbye
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "goodbye";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T goodbye;
            T& operator()() { return goodbye; }
            const T& operator()() const { return goodbye; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::varchar, sqlpp::tag::can_be_null>;
    };
  } // namespace GreetState_

  struct GreetState: sqlpp::table_t<GreetState,
               GreetState_::User,
               GreetState_::Phone,
               GreetState_::Hello,
               GreetState_::Endtime,
               GreetState_::Attention,
               GreetState_::Goodbye>
  {
    struct _alias_t
    {
      static constexpr const char _literal[] =  "greetState";
      using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
      template<typename T>
      struct _member_t
      {
        T greetState;
        T& operator()() { return greetState; }
        const T& operator()() const { return greetState; }
      };
    };
  };
} // namespace r8
#endif
